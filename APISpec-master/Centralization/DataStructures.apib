# Data Structures

## Coupon Base (object)
+ percent_off: 25 (number)

    A positive integer between 1 and 100 that represents the discount the
    coupon will apply.

+ redeem_by (number) - Date after which the coupon can no longer be redeemed

## Address (object)
+ ID: 25 (number)
+ formatted_address: `175 Varick St, New York, NY 10014, United States` (string)
+ street: `Varick St` (string)
+ street_number: `175` (number)
+ state: `New York` (string)
+ state_code: `NY` (string)
+ zipcode: `10014` (string)
+ country: `United States` (string)
+ country_code: `US` (string)

## Supplier (object)
+ ID: 25 (number)
+ external_id: `NY` (string)
+ name: `NY` (string)
+ email: `NY` (string)
+ phone: `NY` (string)
+ delivery_days (array[number])
+ order_minimum: `10` (number)
+ order_cutoff_time: `10:00:00` (string)
+ address (Address)

## SupplierRequest (object)
+ external_id: `NY` (string)
+ name: `NY` (string)
+ email: `NY` (string)
+ phone: `NY` (string)
+ address: `175 Varick St, New York, NY 10014, United States` (string)
+ delivery_days (array[number])
+ order_minimum: `10` (number)
+ order_cutoff_time: `10:00:00` (string)

## Category (object)
+ ID: 25 (number)
+ name: `Value of category` (string)

## CategoryRequest (object)
+ name: `Value of category` (string)

## Unit (object)
+ ID: 1 (number)
+ name: `g` (string)
+ type: `mass` (string)

## Ingredient (object)
+ ID: 25 (number)
+ external_id: `25649` (string)
+ name: `Tomato` (string)
+ display_name: `Tomato` (string)
+ category (Category)
+ parent_ingredient (Category)
+ types (array[Category])
+ geographies (array[Category])
+ colors (array[Category])
+ characteristics (array[Category])
+ treatments (array[Category])
+ pre_cooking_methods (array[Category])
+ health_categories (array[Category])
+ seasoning (array[Category])
+ flavors (array[Category])
+ shapes (array[Category])
+ packaging (array[Category])
+ preservation_methods (array[Category])
+ sizes_options (array[Category])
+ unit (Unit)
+ purchase_category (Category)
+ nutritional_ingredient (Category)
+ is_cpg: `true` (boolean)

## IngredientRequest (object)
+ name: `Carrot` (string)
+ ingredient_category_id (number)
+ parent_ingredient_id (number)
+ types (array[number])
+ geographies (array[number])
+ colors (array[number])
+ characteristics (array[number])
+ treatments (array[number])
+ pre_cooking_methods (array[number])
+ health_categories (array[number])
+ seasoning (array[number])
+ flavors (array[number])
+ shapes (array[number])
+ packaging (array[number])
+ preservation_methods (array[number])
+ sizes_options (array[number]) // for Ingredients only
+ unit_id: `1` (number)
+ purchase_category_id (number)
+ external_id: `abcd` (string)
+ display_name: `Carrot` (string)
+ nutritional_ingredient_id: 1 (string)
+ size_option_id (number) // for CPGs only
+ size: 1 (number) // for CPGs only
+ item_size_unit_id: 1 (number) // for CPGs only

## SupplierProduct (object)
+ ID: 25 (number)
+ external_id: `25649` (string)
+ name: `SOY SAUCE` (string)
+ packing_barcode: `abcd` (string)
+ manufacturer_barcode: `abcd` (string)
+ gtin: `abcd` (string)
+ pack_size_quantity: 1 (number)
+ single_weight_size_quantity: 2 (number)
+ single_volume_size_quantity: 3 (number)
+ single_count_size_quantity: 4 (number)
+ brand (Category)
+ supplier (Supplier)
+ ingredient_category_id (number)
+ parent_supplier_product_id (number)
+ ingredient_id: 1 (number)
+ barcodes (array[Barcode])
+ pack_size_unit_id (number)
+ inner_pack_size_unit_id (number)
+ single_weight_size_unit (Unit)
+ single_volume_size_unit (Unit)
+ single_count_size_unit (Unit)
+ purchase_unit (Unit)

## SupplierProductRequest (object)
+ ID (number)
+ external_id: `abcd` (string)
+ name: `Supplier product name` (string)
+ packing_barcode: `abcd` (string)
+ manufacturer_barcode: `abcd` (string)
+ gtin: `1223456` (string)
+ pack_size_quantity: 1 (number)
+ single_weight_size_quantity: 1 (number)
+ single_volume_size_quantity: 2 (number)
+ single_count_size_quantity: 3  (number)
+ brand_id: 1 (number)
+ supplier_id: 1 (number)
+ ingredient_category_id: 1 (number)
+ parent_supplier_product_id: 2 (number)
+ ingredient_id: 1 (number)
+ barcodes (array[string])
+ pack_size_unit_id (number)
+ inner_pack_size_unit_id (number)
+ single_weight_size_unit_id (number)
+ single_volume_size_unit_id (number)
+ single_count_size_unit_id (number)
+ purchase_unit_id (number)
+ characteristics (array[number])
+ geography (array[number])
+ colors (array[number])
+ treatments (array[number])
+ pre_cooking_methods (array[number])
+ health_categories (array[number])
+ ingredients_types (array[number])
+ seasoning (array[number])
+ flavors (array[number])
+ shapes (array[number])
+ packaging (array[number])
+ preservation_methods (array[number])

## Recipe (object)
+ ID (number)
+ course_id (number)
+ temperature_id (number)
+ name: `Caesar salad` (string)
+ short_name: `Caesar salad` (string)
+ description: `Traditional Caesar salad that uses kale instead of romaine!` (string)
+ prep_instructions: `Chop together anchovy fillets, garlic, and pinch of salt. Use the side of a knife blade to mash into a paste, then ...` (string)
+ servings_number: 24 (number)
+ fixed_portions: `true` (boolean)
+ recipe_types (array[Category])
+ recipe_times (array[Category])
+ recipe_appearances (array[Category])
+ recipe_sources (array[Category])
+ cooking_methods (array[Category])
+ dietaries (array[Category])
+ textures (array[Category])
+ tastes (array[Category])
+ ethnicities (array[Category])
+ holidays (array[Category])
+ seasons (array[Category])
+ allergens (array[Category])
+ is_nutrait: `false` (boolean)
+ prep_time_minutes: 30 (number)
+ complexity (number)
+ image_file: `https://images.media-allrecipes.com/userphotos/600x600/8544230.jpg` (string)
+ equipments (array[Category])

## RecipeRequest (object)
+ course_id (number)
+ temperature_id (number)
+ name: `Caesar salad` (string)
+ short_name: `Caesar salad` (string)
+ description: `Traditional Caesar salad that uses kale instead of romaine!` (string)
+ prep_instructions: `Chop together anchovy fillets, garlic, and pinch of salt. Use the side of a knife blade to mash into a paste, then ...` (string)
+ servings_number: 24 (number)
+ fixed_portions: `false` (boolean)
+ recipe_types (array[number])
+ recipe_times (array[number])
+ recipe_appearances (array[number])
+ recipe_sources (array[number])
+ cooking_methods (array[number])
+ dietaries (array[number])
+ textures (array[number])
+ tastes (array[number])
+ ethnicities (array[number])
+ holidays (array[number])
+ seasons (array[number])
+ allergens (array[number])
+ medical_diets (array[number])
+ equipments (array[number])
+ searchable_ingredients (array[number])


## RecipeComponent (object)
+ ID: 1 (number)
+ name: `Component 1` (string)
+ serving_utensil: `1` (string)
+ serving_per_pan: `5` (string)
+ temperature (Temperature)

## Temperature (object)
+ ID (number)
+ name: `Hot` (string)


## RecipeComponentRequest (object)
+ name: `Component 1` (string)
+ temperature_id (number)
+ serving_utensil (number)
+ serving_per_pan (number)

## RecipeIngredientCategory (object)
+ ID (number)
+ name: `Base`(string)
+ prep_instructions: `1. Bake potato and serve hot` (string)
+ ingredients (array[Ingredient])

## RecipeIngredientCategoryRequest (object)
+ name: `Base` (string)
+ recipe_id (number)

## RecipeIngredient (object)
+ ID (number)
+ unit (Unit)
+ quantity (number)
+ ingredient (Ingredient)
+ prep_note (PrepNote)

## RecipeIngredientRequest (object)
+ unit_id (number)
+ recipe_ingredient_category_id (number)
+ quantity (number)
+ ingredient_id (number)
+ prep_note_id (number)

## PrepNote (object)
+ ID (number)
+ name: `chopped` (string)
+ post_cooking_method: `steamed` (string)
+ preparation: `trimmed, diced` (string)

## PortionSize (object)
+ ID (number)
+ is_default (boolean)
+ size (number)
+ stock_consumption (Ingredient)
+ unit (Unit)
+ barcodes (Barcode)

## RecipePortionSizeRequest (object)
+ is_default (boolean)
+ size (number)
+ stock_consumption (number)
+ unit_id (number)
+ barcodes (array[string])
+ servings_number (number)

## Barcode (object)
+ ID (number)
+ barcode: `abcd` (string)

## RecipeProductionTaskTemplate (object)
+ title: `Add curry paste. Saute 2 minutes.` (string)
+ manual_task (boolean)
+ workflow_task (boolean)
+ display_order (number)
+ dependency (array[RecipeProductionTaskTemplate])
+ subtasks (array[RecipeProductionTaskTemplate])

## RecipeProductionTaskTemplateRequest (object)
+ title: `Add curry paste. Saute 2 minutes.` (string)
+ taskmaster_task_category_id (number)
+ dependency_task_id (number)
+ parent_task_id (number)

## WorkflowProductionTaskTemplateRequest (object)
+ instructions (array[WorkflowInstruction])

## WorkflowInstruction (object)
+ category_name: `Base` (string)
+ tasks (array[WorkflowProductionTaskTemplate])

## WorkflowProductionTaskTemplate (object)
+ display_order (number)
+ description (string)

## Feedback (object)
+ ID (number)
+ entity: `App\Models\Ingredient` (string)
+ feedbackable: `object|Recipe|Ingredient|Supplier`
+ name: `CAULIFLOWER FLORET MINI CUT--IMPFRSH/2@3 LB` (string)
+ json_entity: `{}` (string)
+ is_new_request (boolean)
+ opened_at: `2018-01-01`(string)
+ opened_by (number)
+ requested_by: `14` (string)
+ response: `Rejecting request: 04172019` (string)
+ rationale: `abcd` (string)

## FeedbackStatus (object)
+ ID (number)
+ name: `Open` (string)

## PrepNoteRequest (object)
+ name: `chopped` (string)
+ post_cooking_method: `steamed` (string)
+ preparation: `trimmed, diced` (string)

## RecipePortionSizeBulkRequest (object)
+ recipes_portions_sizes (array[RecipePortionSizeRequest])